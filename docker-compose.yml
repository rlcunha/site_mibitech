version: '3.7'

# A propriedade 'name' não é suportada em todas as versões do Docker Compose
# Remova-a e use o nome do diretório ou especifique-o no comando: docker-compose -p mibitech up

services:
  # Não precisamos definir o Traefik aqui, pois já está rodando no servidor

  mibitech-backend:
    build: ./backend
    image: mibitech-backend:latest
    volumes:
      - mibitech_backend_data:/app
      - mibitech_backend_static:/app/static
    networks:
      - network_public
    environment:
      - DEBUG=False
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,site.mibitech.com.br
      - VIRTUAL_HOST=site.mibitech.com.br
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.mibitech_backend.rule=Host(`site.mibitech.com.br`) && (PathPrefix(`/api`) || PathPrefix(`/admin`))"
        - "traefik.http.routers.mibitech_backend.entrypoints=websecure"
        - "traefik.http.routers.mibitech_backend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.mibitech_backend.loadbalancer.server.port=8000"
        - "traefik.http.services.mibitech_backend.loadbalancer.passHostHeader=true"

  mibitech-frontend:
    build: ./frontend
    image: mibitech-frontend:latest
    volumes:
      - mibitech_frontend_data:/app
      - /app/node_modules
    depends_on:
      - mibitech-backend
    environment:
      - API_URL=http://mibitech-backend:8000
      - VIRTUAL_HOST=site.mibitech.com.br
    networks:
      - network_public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.mibitech_frontend.rule=Host(`site.mibitech.com.br`)"
        - "traefik.http.routers.mibitech_frontend.entrypoints=websecure"
        - "traefik.http.routers.mibitech_frontend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.mibitech_frontend.loadbalancer.server.port=3000"
        - "traefik.http.services.mibitech_frontend.loadbalancer.passHostHeader=true"
        - "traefik.http.routers.mibitech_frontend.priority=1"

  # Adicionar o serviço Nginx para servir conteúdo estático
  mibitech-nginx:
    build:
      context: ./nginx
      args:
        # Change this value to force rebuild
        CACHEBUST: "2"
    image: mibitech_nginx:latest
    volumes:
      - mibitech_nginx_data:/var/log/nginx
      - mibitech_backend_static:/static
    networks:
      - network_public
    depends_on:
      - mibitech-backend
      - mibitech-frontend
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.mibitech_nginx.rule=Host(`static.mibitech.com.br`)"
        - "traefik.http.routers.mibitech_nginx.entrypoints=websecure"
        - "traefik.http.routers.mibitech_nginx.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.mibitech_nginx.loadbalancer.server.port=80"
        - "traefik.http.services.mibitech_nginx.loadbalancer.passHostHeader=true"

volumes:
  mibitech_backend_data:
    external: true
    name: mibitech_backend_data
  mibitech_frontend_data:
    external: true
    name: mibitech_frontend_data
  mibitech_nginx_data:
    external: true
    name: mibitech_nginx_data
  mibitech_backend_static:
    external: true
    name: mibitech_backend_static

networks:
  network_public:
    external: true
    name: network_public

# Configuração para Docker Swarm
# Para implantar: docker stack deploy -c docker-compose.yml mibitech